#include <iostream>
#include <clocale>
#define N 4
#define M 4

using namespace std;

int main() {
	setlocale(LC_ALL, "Bulgarian");
	int arr[N][M];

	//Въвеждане на матрицата
	cout << "Моля въведете стойности за масив с рамери " << N << " реда и " << M << " колони.\n";
	for (size_t i = 0; i < N; i++)
	{
		for (size_t j = 0; j < M; j++)
		{
			cout << "arr[" << i << "][" << j << "] = ";
			cin >> arr[i][j];
		}
	}

	//А) се намери и отпечата  max/min на елементите под основния диагонал (без него);
	int min = arr[1][0], max = arr[1][0];
	for (size_t i = 0; i < N; i++)
	{
		for (size_t j = 0; j < M; j++)
		{
			if (i > j)
			{
				if (min > arr[i][j])
					min = arr[i][j];
				if (max < arr[i][j])
					max = arr[i][j];
			}
		}
	}
	cout << "Миниламната стойност на елементите под главния диагонал е: " << min << endl;
	cout << "Максималната стойност на елементите под главния диагонал е: " << max << endl;

	//Б) се намери и отпечата сумата на елементите над вторичния диагонал, включително и на елементите по него; 
	int sum = 0;
	for (size_t i = 0; i < N; i++)
	{
		for (size_t j = i; j <= M - i - 1; j++)
		{
			sum += arr[i][j];
		}
	}
	cout << "Сумата на елементите над вторичния диагонал, включително и на елементите по него е: " << sum << endl;

	//В) се отпечатат елементите на масива през ред и през стълб, като се печатат четните редове и нечетните стълбове.
	cout << "Отпечатване на елементите на масива през ред и през стълб, като се печатат четните редове и нечетните стълбове:\n";
	for (size_t i = 0; i < N; i++)
	{
		if (i % 2 == 0)
		{
			for (size_t j = 0; j < M; j++)
			{
				cout << arr[i][j] << "\t";
			}
			cout << endl;
		}
	}

	for (size_t i = 0; i < N; i++)
	{
		for (size_t j = 0; j < M; j++)
		{
			if (j % 2 != 0)
			{
				cout << arr[i][j] << "\t";
			}
		}
		cout << endl;
	}

	//Отпечатване на матрицата
	cout << "Отпечатване на стойности на масив с рамери " << N << " реда и " << M << " колони.\n";
	for (size_t i = 0; i < N; i++)
	{
		for (size_t j = 0; j < M; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << endl;
	}
}
